// <auto-generated />
using System;
using DocumentVersionManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySql.EntityFrameworkCore.Metadata;

#nullable disable

namespace DocumentVersionManager.Infrastructure.Migrations
{
    [DbContext(typeof(DocumentVersionManagerContext))]
    partial class DocumentVersionManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacitySpecification", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<bool>("Alloy")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("AustenitizationHardnessHigh")
                        .HasColumnType("int");

                    b.Property<int?>("AustenitizationHardnessLow")
                        .HasColumnType("int");

                    b.Property<double?>("AustenitizationTemperatureInF")
                        .HasColumnType("double");

                    b.Property<int?>("AustenitizationTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("CCNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DefaultCableLength")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("HasScrews")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MinimumDeadLoad")
                        .HasColumnType("int");

                    b.Property<string>("NTEPCertificationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("NTEPCertificationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("NominalOutput")
                        .HasColumnType("double");

                    b.Property<decimal?>("NominalOutputPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NonlinearityPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NumberInBasket")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfGauges")
                        .HasColumnType("int");

                    b.Property<string>("OIMLCertificationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OIMLCertificationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Resistance")
                        .HasColumnType("int");

                    b.Property<int?>("SafeLoad")
                        .HasColumnType("int");

                    b.Property<string>("ShellMaterialName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TempRangeHigh")
                        .HasColumnType("int");

                    b.Property<int?>("TempRangeLow")
                        .HasColumnType("int");

                    b.Property<int?>("TemperingHardnessHigh")
                        .HasColumnType("int");

                    b.Property<int?>("TemperingHardnessLow")
                        .HasColumnType("int");

                    b.Property<double?>("TemperingTemperatureInF")
                        .HasColumnType("double");

                    b.Property<int?>("TemperingTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UltimateLoad")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("nMax")
                        .HasColumnType("int");

                    b.Property<double?>("vMin")
                        .HasColumnType("double");

                    b.HasKey("Capacity", "ModelName", "ModelVersionId");

                    b.HasIndex("ShellMaterialName");

                    b.HasIndex("ModelName", "ModelVersionId");

                    b.ToTable("CapacitySpecification");

                    b.HasData(
                        new
                        {
                            Capacity = 100,
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Alloy = true,
                            Application = "APPLICATION",
                            AustenitizationHardnessHigh = 1,
                            AustenitizationHardnessLow = 1,
                            AustenitizationTemperatureInF = 1.0,
                            AustenitizationTimeInSeconds = 1,
                            CCNumber = "CCNUMBER",
                            Class = "CLASS",
                            DefaultCableLength = 20,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            HasScrews = true,
                            MinimumDeadLoad = 1,
                            NTEPCertificationId = "NTEPCERTIFICATIONID",
                            NTEPCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(2989),
                            NominalOutput = 1.0,
                            NominalOutputPercentage = 1m,
                            NonlinearityPercentage = 1m,
                            NumberInBasket = 1,
                            NumberOfGauges = 1,
                            OIMLCertificationId = "OIMLCERTIFICATIONID1",
                            OIMLCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(2991),
                            Resistance = 1,
                            SafeLoad = 1,
                            ShellMaterialName = "SHELLMATERIAL1",
                            TempRangeHigh = 1,
                            TempRangeLow = 1,
                            TemperingHardnessHigh = 1,
                            TemperingHardnessLow = 1,
                            TemperingTemperatureInF = 1.0,
                            TemperingTimeInSeconds = 1,
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(2982),
                            UltimateLoad = 1,
                            Username = "OLADEJI",
                            nMax = 1,
                            vMin = 1.0
                        },
                        new
                        {
                            Capacity = 101,
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Alloy = true,
                            Application = "APPLICATION",
                            AustenitizationHardnessHigh = 1,
                            AustenitizationHardnessLow = 1,
                            AustenitizationTemperatureInF = 1.0,
                            AustenitizationTimeInSeconds = 1,
                            CCNumber = "CCNUMBER",
                            Class = "CLASS",
                            DefaultCableLength = 20,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            HasScrews = true,
                            MinimumDeadLoad = 1,
                            NTEPCertificationId = "NTEPCERTIFICATIONID",
                            NTEPCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3047),
                            NominalOutput = 1.0,
                            NominalOutputPercentage = 1m,
                            NonlinearityPercentage = 1m,
                            NumberInBasket = 1,
                            NumberOfGauges = 1,
                            OIMLCertificationId = "OIMLCERTIFICATIONID2",
                            OIMLCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3047),
                            Resistance = 1,
                            SafeLoad = 1,
                            ShellMaterialName = "SHELLMATERIAL2",
                            TempRangeHigh = 1,
                            TempRangeLow = 1,
                            TemperingHardnessHigh = 1,
                            TemperingHardnessLow = 1,
                            TemperingTemperatureInF = 1.0,
                            TemperingTimeInSeconds = 1,
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3044),
                            UltimateLoad = 1,
                            Username = "OLADEJI",
                            nMax = 1,
                            vMin = 1.0
                        },
                        new
                        {
                            Capacity = 102,
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Alloy = true,
                            Application = "APPLICATION",
                            AustenitizationHardnessHigh = 1,
                            AustenitizationHardnessLow = 1,
                            AustenitizationTemperatureInF = 1.0,
                            AustenitizationTimeInSeconds = 1,
                            CCNumber = "CCNUMBER",
                            Class = "CLASS",
                            DefaultCableLength = 20,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            HasScrews = true,
                            MinimumDeadLoad = 1,
                            NTEPCertificationId = "NTEPCERTIFICATIONID",
                            NTEPCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3055),
                            NominalOutput = 1.0,
                            NominalOutputPercentage = 1m,
                            NonlinearityPercentage = 1m,
                            NumberInBasket = 1,
                            NumberOfGauges = 1,
                            OIMLCertificationId = "OIMLCERTIFICATIONID2",
                            OIMLCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3056),
                            Resistance = 1,
                            SafeLoad = 1,
                            ShellMaterialName = "SHELLMATERIAL2",
                            TempRangeHigh = 1,
                            TempRangeLow = 1,
                            TemperingHardnessHigh = 1,
                            TemperingHardnessLow = 1,
                            TemperingTemperatureInF = 1.0,
                            TemperingTimeInSeconds = 1,
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3053),
                            UltimateLoad = 1,
                            Username = "OLADEJI",
                            nMax = 1,
                            vMin = 1.0
                        },
                        new
                        {
                            Capacity = 100,
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 2,
                            Alloy = true,
                            Application = "APPLICATION",
                            AustenitizationHardnessHigh = 1,
                            AustenitizationHardnessLow = 1,
                            AustenitizationTemperatureInF = 1.0,
                            AustenitizationTimeInSeconds = 1,
                            CCNumber = "CCNUMBER",
                            Class = "CLASS",
                            DefaultCableLength = 20,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            HasScrews = true,
                            MinimumDeadLoad = 1,
                            NTEPCertificationId = "NTEPCERTIFICATIONID",
                            NTEPCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3061),
                            NominalOutput = 1.0,
                            NominalOutputPercentage = 1m,
                            NonlinearityPercentage = 1m,
                            NumberInBasket = 1,
                            NumberOfGauges = 1,
                            OIMLCertificationId = "OIMLCERTIFICATIONID2",
                            OIMLCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3062),
                            Resistance = 1,
                            SafeLoad = 1,
                            ShellMaterialName = "SHELLMATERIAL2",
                            TempRangeHigh = 1,
                            TempRangeLow = 1,
                            TemperingHardnessHigh = 1,
                            TemperingHardnessLow = 1,
                            TemperingTemperatureInF = 1.0,
                            TemperingTimeInSeconds = 1,
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3059),
                            UltimateLoad = 1,
                            Username = "OLADEJI",
                            nMax = 1,
                            vMin = 1.0
                        },
                        new
                        {
                            Capacity = 100,
                            ModelName = "SECONDMODELNAME",
                            ModelVersionId = 1,
                            Alloy = true,
                            Application = "APPLICATION",
                            AustenitizationHardnessHigh = 1,
                            AustenitizationHardnessLow = 1,
                            AustenitizationTemperatureInF = 1.0,
                            AustenitizationTimeInSeconds = 1,
                            CCNumber = "CCNUMBER",
                            Class = "CLASS",
                            DefaultCableLength = 20,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            HasScrews = true,
                            MinimumDeadLoad = 1,
                            NTEPCertificationId = "NTEPCERTIFICATIONID",
                            NTEPCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3067),
                            NominalOutput = 1.0,
                            NominalOutputPercentage = 1m,
                            NonlinearityPercentage = 1m,
                            NumberInBasket = 1,
                            NumberOfGauges = 1,
                            OIMLCertificationId = "OIMLCERTIFICATIONID3",
                            OIMLCertificationTimestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3068),
                            Resistance = 1,
                            SafeLoad = 1,
                            ShellMaterialName = "SHELLMATERIAL3",
                            TempRangeHigh = 1,
                            TempRangeLow = 1,
                            TemperingHardnessHigh = 1,
                            TemperingHardnessLow = 1,
                            TemperingTemperatureInF = 1.0,
                            TemperingTimeInSeconds = 1,
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 48, DateTimeKind.Utc).AddTicks(3065),
                            UltimateLoad = 1,
                            Username = "OLADEJI",
                            nMax = 1,
                            vMin = 1.0
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacityTestPoint", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("MySQL:ValueGenerationStrategy", MySQLValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("TestId");

                    b.HasIndex("Capacity", "ModelName", "ModelVersionId");

                    b.ToTable("CapacityTestPoint");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            Capacity = 100,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Weight = 1
                        },
                        new
                        {
                            TestId = 9,
                            Capacity = 101,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Weight = 1
                        },
                        new
                        {
                            TestId = 39,
                            Capacity = 102,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            Weight = 1
                        },
                        new
                        {
                            TestId = 49,
                            Capacity = 100,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelName = "SECONDMODELNAME",
                            ModelVersionId = 1,
                            Weight = 1
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Document", b =>
                {
                    b.Property<string>("DocumentName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeOrderPDFPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContentPDFPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DocumentName", "ModelName", "ModelVersionId");

                    b.HasIndex("ModelName", "ModelVersionId");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            ChangeOrderPDFPath = "CHANGE ORDER PATH",
                            ContentPDFPath = "CONTENT PDF PATH",
                            DocumentDescription = "SIMPLE DESCRITION OF DOCUMENT",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 50, DateTimeKind.Utc).AddTicks(3831)
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc A",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            ChangeOrderPDFPath = "CHANGE ORDER PATH",
                            ContentPDFPath = "CONTENT PDF PATH",
                            DocumentDescription = "SIMPLE DESCRITION OF DOCUMENT",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 50, DateTimeKind.Utc).AddTicks(3840)
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc B",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            ChangeOrderPDFPath = "CHANGE ORDER PATH",
                            ContentPDFPath = "CONTENT PDF PATH",
                            DocumentDescription = "SIMPLE DESCRITION OF DOCUMENT",
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5"),
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 50, DateTimeKind.Utc).AddTicks(3843)
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver2 DOc A",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 2,
                            ChangeOrderPDFPath = "CHANGE ORDER PATH",
                            ContentPDFPath = "CONTENT PDF PATH",
                            DocumentDescription = "SIMPLE DESCRITION OF DOCUMENT",
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 50, DateTimeKind.Utc).AddTicks(3844)
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.DocumentDocumentType", b =>
                {
                    b.Property<string>("DocumentName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentTypeName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentTypeTypeName")
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("DocumentName", "ModelName", "ModelVersionId", "DocumentTypeName");

                    b.HasIndex("DocumentTypeTypeName");

                    b.ToTable("DocumentDocumentType");

                    b.HasData(
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc A",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Cabling",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc A",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Chroming",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc A",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Sealing",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc B",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Cabling",
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5")
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc B",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Chroming",
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5")
                        },
                        new
                        {
                            DocumentName = "FIRSTMODELNAME ver1 DOc B",
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            DocumentTypeName = "Sealing",
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5")
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.DocumentType", b =>
                {
                    b.Property<string>("TypeName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("TypeName");

                    b.ToTable("DocumentType");

                    b.HasData(
                        new
                        {
                            TypeName = "Cabling",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            TypeName = "Chroming",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            TypeName = "Sealing",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            TypeName = "Gauging",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            TypeName = "Wiring",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.HigherModel", b =>
                {
                    b.Property<string>("HigherModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HigherModelDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("HigherModelName");

                    b.ToTable("HigherModel");

                    b.HasData(
                        new
                        {
                            HigherModelName = "HigherModel1",
                            Capacity = 1,
                            GuidId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HigherModelDescription = "HigherModel1",
                            Id = "fb806fa8-5d1e-4869-86e9-1fbdceff6d3b",
                            ProductId = "HigherModel1"
                        },
                        new
                        {
                            HigherModelName = "HigherModel2",
                            Capacity = 12,
                            GuidId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HigherModelDescription = "HigherModel12",
                            Id = "6f3cb674-3884-4e2d-b2a5-86b806b6ddef",
                            ProductId = "HigherModel12"
                        },
                        new
                        {
                            HigherModelName = "HigherModel3",
                            Capacity = 13,
                            GuidId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HigherModelDescription = "HigherModel1",
                            Id = "0485078f-d689-407b-9a8a-166b23680a49",
                            ProductId = "HigherModel13"
                        },
                        new
                        {
                            HigherModelName = "HigherModel4",
                            Capacity = 14,
                            GuidId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HigherModelDescription = "HigherModel14",
                            Id = "b71f941d-7cce-45f5-8d8b-e23be2389f96",
                            ProductId = "HigherModel14"
                        },
                        new
                        {
                            HigherModelName = "HigherModel5",
                            Capacity = 5,
                            GuidId = new Guid("00000000-0000-0000-0000-000000000000"),
                            HigherModelDescription = "HigherModel5",
                            Id = "32b68817-6f56-4e98-9f0a-0c4afbd27deb",
                            ProductId = "HigherModel5"
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Model", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModelTypesName")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("ModelName");

                    b.HasIndex("ModelTypesName");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            ModelName = "FIRSTMODELNAME",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelTypesName = "FIRSTMODELTYPE"
                        },
                        new
                        {
                            ModelName = "SECONDMODELNAME",
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5"),
                            ModelTypesName = "FIRSTMODELTYPE"
                        },
                        new
                        {
                            ModelName = "THIRDMODELNAME",
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            ModelTypesName = "SECONDMODELTYPE"
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelTypes", b =>
                {
                    b.Property<string>("ModelTypesName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("ModelTypesName");

                    b.ToTable("ModelType");

                    b.HasData(
                        new
                        {
                            ModelTypesName = "FIRSTMODELTYPE",
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            ModelTypesName = "SECONDMODELTYPE",
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b")
                        },
                        new
                        {
                            ModelTypesName = "THIRDMODELTYPE",
                            GuidId = new Guid("3c69923e-a68e-4348-b06c-7007f527355d")
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelVersion", b =>
                {
                    b.Property<string>("ModelName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<int>("ModelVersionId")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ModelVersionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VersionDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ModelName", "ModelVersionId");

                    b.ToTable("ModelVersion");

                    b.HasData(
                        new
                        {
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 1,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63"),
                            ModelVersionName = "FIRST_VERSION_FIRSTMODEL_NAME",
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 54, DateTimeKind.Utc).AddTicks(5075),
                            Username = "OLADEJI",
                            VersionDescription = "SPECIAL DESIGN"
                        },
                        new
                        {
                            ModelName = "FIRSTMODELNAME",
                            ModelVersionId = 2,
                            GuidId = new Guid("7808711f-544a-423d-8d99-f00c31e35be5"),
                            ModelVersionName = "SECOND_VERSION_FIRSTMODELNAME",
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 54, DateTimeKind.Utc).AddTicks(5084),
                            Username = "OLADEJI",
                            VersionDescription = "AUTO DESIGN TO COMBAT SPLIILING"
                        },
                        new
                        {
                            ModelName = "SECONDMODELNAME",
                            ModelVersionId = 1,
                            GuidId = new Guid("58dcf5c5-5a00-4ffa-bb37-9374a8d3c69b"),
                            ModelVersionName = "FIRST_VERSION_SECONDMODELNAME",
                            Timestamp = new DateTime(2023, 11, 1, 20, 15, 25, 54, DateTimeKind.Utc).AddTicks(5085),
                            Username = "OLADEJI",
                            VersionDescription = "INITIAL DESIGN"
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ShellMaterial", b =>
                {
                    b.Property<string>("ShellMaterialName")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Alloy")
                        .HasColumnType("int");

                    b.Property<Guid>("GuidId")
                        .HasColumnType("char(36)");

                    b.HasKey("ShellMaterialName");

                    b.ToTable("ShellMaterial");

                    b.HasData(
                        new
                        {
                            ShellMaterialName = "ShellMaterial1",
                            Alloy = 1,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            ShellMaterialName = "ShellMaterial2",
                            Alloy = 2,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            ShellMaterialName = "ShellMaterial3",
                            Alloy = 1,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        },
                        new
                        {
                            ShellMaterialName = "ShellMaterial4",
                            Alloy = 2,
                            GuidId = new Guid("b27c2c19-522b-49d1-83bf-e80d4dde8c63")
                        });
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacitySpecification", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ShellMaterial", "ShellMaterial")
                        .WithMany("CapacitySpecifications")
                        .HasForeignKey("ShellMaterialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelVersion", "ModelVersion")
                        .WithMany("CapacitySpecifications")
                        .HasForeignKey("ModelName", "ModelVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelVersion");

                    b.Navigation("ShellMaterial");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacityTestPoint", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacitySpecification", "CapacitySpecification")
                        .WithMany("CapacityTestPoints")
                        .HasForeignKey("Capacity", "ModelName", "ModelVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapacitySpecification");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Document", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelVersion", "ModelVersion")
                        .WithMany("Documents")
                        .HasForeignKey("ModelName", "ModelVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelVersion");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.DocumentDocumentType", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.DocumentType", "DocumentType")
                        .WithMany("DocumentDocumentTypes")
                        .HasForeignKey("DocumentTypeTypeName");

                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Document", "Document")
                        .WithMany("DocumentDocumentTypes")
                        .HasForeignKey("DocumentName", "ModelName", "ModelVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Model", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelTypes", "ModelTypes")
                        .WithMany("Models")
                        .HasForeignKey("ModelTypesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelTypes");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelVersion", b =>
                {
                    b.HasOne("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Model", "Models")
                        .WithMany("ModelVersions")
                        .HasForeignKey("ModelName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Models");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.CapacitySpecification", b =>
                {
                    b.Navigation("CapacityTestPoints");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Document", b =>
                {
                    b.Navigation("DocumentDocumentTypes");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.DocumentType", b =>
                {
                    b.Navigation("DocumentDocumentTypes");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.Model", b =>
                {
                    b.Navigation("ModelVersions");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelTypes", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ModelVersion", b =>
                {
                    b.Navigation("CapacitySpecifications");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentVersionManager.Domain.ModelAggregateRoot.Entities.ShellMaterial", b =>
                {
                    b.Navigation("CapacitySpecifications");
                });
#pragma warning restore 612, 618
        }
    }
}
